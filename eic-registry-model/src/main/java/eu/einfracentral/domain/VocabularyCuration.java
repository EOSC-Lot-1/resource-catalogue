package eu.einfracentral.domain;

import eu.einfracentral.annotation.FieldValidation;
import io.swagger.annotations.ApiModelProperty;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

@XmlType
@XmlRootElement(namespace = "http://einfracentral.eu")
public class VocabularyCuration implements Identifiable {

    private static final Logger logger = LogManager.getLogger(User.class);

    @XmlElement(required = true)
    @ApiModelProperty(position = 1, notes = "Autogenerated", required = true)
//    @FieldValidation
    private String id;

    @XmlElementWrapper(required = true, name = "vocabularyEntryRequests")
    @XmlElement(name = "vocabularyEntryRequest")
    @ApiModelProperty(position = 2, required = true)
    @FieldValidation
    private List<VocabularyEntryRequest> vocabularyEntryRequests;

    @XmlElement(required = true)
    @ApiModelProperty(position = 3, required = true)
    @FieldValidation
    private String entryValueName;

    @XmlElement(required = true)
    @ApiModelProperty(position = 4, required = true)
    @FieldValidation
    private String vocabulary;

    @XmlElement
    @ApiModelProperty(position = 5)
    @FieldValidation(nullable = true, containsId = true, idClass = Vocabulary.class)
    private String parent;

    @XmlElement(required = true)
    @ApiModelProperty(position = 6, required = true)
    @FieldValidation
    private String status;

    @XmlElement
    @ApiModelProperty(position = 7)
    @FieldValidation(nullable = true)
    private String rejectionReason;

    @XmlElement
    @ApiModelProperty(position = 8)
    @FieldValidation(nullable = true)
    private Date resolutionDate;

    @XmlElement
    @ApiModelProperty(position = 9)
    @FieldValidation(nullable = true)
    private String resolutionUser;

    public VocabularyCuration() {
    }

    public VocabularyCuration(VocabularyCuration vocabularyCuration) {
        this.id = vocabularyCuration.getId();
        this.vocabularyEntryRequests = vocabularyCuration.getVocabularyEntryRequests();
        this.entryValueName = vocabularyCuration.getEntryValueName();
        this.vocabulary = vocabularyCuration.getVocabulary();
        this.parent = vocabularyCuration.getParent();
        this.status = vocabularyCuration.getStatus();
        this.rejectionReason = vocabularyCuration.getRejectionReason();
        this.resolutionDate = vocabularyCuration.getResolutionDate();
        this.resolutionUser = vocabularyCuration.getResolutionUser();
    }

    public enum Vocab {
        // Provider
        PROVIDER_AREA_OF_ACTIVITY("Provider area of activity"),
        PROVIDER_ESFRI_TYPE("Provider esfri type"),
        PROVIDER_ESFRI_DOMAIN("Provider esfri domain"),
        PROVIDER_HOSTING_LEGAL_ENTITY("Provider hosting legal entity"),
        PROVIDER_LEGAL_STATUS("Provider legal status"),
        PROVIDER_LIFE_CYCLE_STATUS("Provider life cycle status"),
        PROVIDER_NETWORK("Provider network"),
        PROVIDER_SOCIETAL_GRAND_CHALLENGE("Provider societal grand challenge"),
        PROVIDER_STRUCTURE_TYPE("Provider structure type"),
        PROVIDER_MERIL_SCIENTIFIC_DOMAIN("Provider meril scientific domain"),
        PROVIDER_MERIL_SCIENTIFIC_SUBDOMAIN("Provider meril scientific subdomain"),
        // Service
        SUPERCATEGORY("Supercategory"),
        CATEGORY("Category"),
        SUBCATEGORY("Subcategory"),
        LANGUAGE("Language"),
        GEOGRAPHIC_LOCATION("Geographic location"),
        REGION("Region"),
        COUNTRY("Country"),
        TRL("Technology readiness level"),
        SCIENTIFIC_DOMAIN("Scientific domain"),
        SCIENTIFIC_SUBDOMAIN("Scientific subdomain"),
        TARGET_USER("Target user"),
        ACCESS_TYPE("Access type"),
        ACCESS_MODE("Access mode"),
        ORDER_TYPE("Order type"),
        FUNDING_BODY("Funding body"),
        FUNDING_PROGRAM("Funding program"),
        LIFE_CYCLE_STATUS("Life cycle status"),
        RELATED_PLATFORM("Related platform"),
        // States
        CATALOGUE_STATE("Catalogue state"),
        PROVIDER_STATE("Provider state"),
        RESOURCE_STATE("Resource state"),
        TEMPLATE_STATE("Template state"),
        // Datasource
        DS_RESEARCH_ENTITY_TYPE("Research entity type"),
        DS_PERSISTENT_IDENTITY_SCHEME("Persistent identity scheme"),
        DS_JURISDICTION("Jurisdiction"),
        DS_CLASSIFICATION("Classification"),
        DS_COAR_ACCESS_RIGHTS_1_0("COAR access rights 1.0"),
        // Monitoring
        MONITORING_MONITORED_BY("Monitored by"),
        // Bundle Extras
        SEMANTIC_RELATIONSHIP("Semantic relationship"),
        RESEARCH_CATEGORY("Research category"),
        // Interoperability Record
        IR_IDENTIFIER_TYPE("Interoperability Record identifier type"),
        IR_NAME_TYPE("Interoperability Record name type"),
        IR_RESOURCE_TYPE_GENERAL("Interoperability Record resource type general"),
        //        IR_EOSC_RELATED_STANDARDS("Interoperability Record eosc related standards"),
        IR_STATUS("Interoperability Record status"),
        IR_EOSC_GUIDELINE_TYPE("Interoperability Record eosc guideline type");

        private final String vocabulary;

        Vocab(final String vocabulary) {
            this.vocabulary = vocabulary;
        }

        public String getKey() {
            return vocabulary;
        }

        /**
         * @return the Enum representation for the given string.
         * @throws IllegalArgumentException if unknown string.
         */
        public static Vocab fromString(String s) throws IllegalArgumentException {
            return Arrays.stream(Vocab.values())
                    .filter(v -> v.vocabulary.equals(s))
                    .findFirst()
                    .orElseThrow(() -> new IllegalArgumentException("unknown value: " + s));
        }
    }

    public enum Status {
        PENDING("Pending"),
        APPROVED("Approved"),
        REJECTED("Rejected");

        private final String status;

        Status(final String status) {
            this.status = status;
        }

        public String getKey() {
            return status;
        }

        /**
         * @return the Enum representation for the given string.
         * @throws IllegalArgumentException if unknown string.
         */
        public static Status fromString(String s) throws IllegalArgumentException {
            return Arrays.stream(Status.values())
                    .filter(v -> v.status.equals(s))
                    .findFirst()
                    .orElseThrow(() -> new IllegalArgumentException("unknown value: " + s));
        }
    }

    @Override
    public String toString() {
        return "VocabularyCuration{" +
                "id='" + id + '\'' +
                ", vocabularyEntryRequests=" + vocabularyEntryRequests +
                ", entryValueName='" + entryValueName + '\'' +
                ", vocabulary='" + vocabulary + '\'' +
                ", parent='" + parent + '\'' +
                ", status='" + status + '\'' +
                ", rejectionReason='" + rejectionReason + '\'' +
                ", resolutionDate=" + resolutionDate +
                ", resolutionUser='" + resolutionUser + '\'' +
                '}';
    }

    @Override
    public String getId() {
        return id;
    }

    @Override
    public void setId(String id) {
        this.id = id;
    }

    public List<VocabularyEntryRequest> getVocabularyEntryRequests() {
        return vocabularyEntryRequests;
    }

    public void setVocabularyEntryRequests(List<VocabularyEntryRequest> vocabularyEntryRequests) {
        this.vocabularyEntryRequests = vocabularyEntryRequests;
    }

    public String getEntryValueName() {
        return entryValueName;
    }

    public void setEntryValueName(String entryValueName) {
        this.entryValueName = entryValueName;
    }

    public String getVocabulary() {
        return vocabulary;
    }

    public void setVocabulary(String vocabulary) {
        this.vocabulary = vocabulary;
    }

    public String getParent() {
        return parent;
    }

    public void setParent(String parent) {
        this.parent = parent;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getRejectionReason() {
        return rejectionReason;
    }

    public void setRejectionReason(String rejectionReason) {
        this.rejectionReason = rejectionReason;
    }

    public Date getResolutionDate() {
        return resolutionDate;
    }

    public void setResolutionDate(Date resolutionDate) {
        this.resolutionDate = resolutionDate;
    }

    public String getResolutionUser() {
        return resolutionUser;
    }

    public void setResolutionUser(String resolutionUser) {
        this.resolutionUser = resolutionUser;
    }
}
